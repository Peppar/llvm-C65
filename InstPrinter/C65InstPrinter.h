//===-- C65InstPrinter.h - Convert C65 MCInst to assembly syntax ----------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This class prints an C65 MCInst to a .s file.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_TARGET_C65INSTPRINTER_H
#define LLVM_TARGET_C65INSTPRINTER_H

#include "llvm/MC/MCInstPrinter.h"
#include "llvm/MC/MCSubtargetInfo.h"

namespace llvm {

class MCOperand;

class C65InstPrinter : public MCInstPrinter {
  const MCSubtargetInfo &STI;
public:
 C65InstPrinter(const MCAsmInfo &MAI,
                const MCInstrInfo &MII,
                const MCRegisterInfo &MRI,
                const MCSubtargetInfo &sti)
   : MCInstPrinter(MAI, MII, MRI), STI(sti) {}

  void printRegName(raw_ostream &OS, unsigned RegNo) const override;
  void printComments(const MCInst *MI, raw_ostream &O);
  void printInst(const MCInst *MI, raw_ostream &O, StringRef Annot) override;
  void printOperand(const MCInst *MI, int OpNum, raw_ostream &OS,
                    bool Imm = false);

  void printAddress(const MCInst *MI, int OpNum, unsigned Indirection,
                    char PreIndexReg, char PostIndexReg,
                    unsigned LengthConstraint, raw_ostream &OS);
  void printPCRel8Operand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printPCRel16Operand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printAbsOperand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printAbsXOperand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printAbsYOperand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printAbsPreIXOperand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printAbsIndOperand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printAbsIndLOperand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printAbsLOperand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printAbsXLOperand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printZPOperand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printZPXOperand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printZPYOperand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printZPPreIXOperand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printZPIndOperand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printDPIndLOperand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printZPPostIYOperand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printDPPostIYLOperand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printSRelOperand(const MCInst *MI, int OpNum, raw_ostream &OS);
  void printSPostIYOperand(const MCInst *MI, int OpNum, raw_ostream &OS);

  /* void printIZOperand(const MCInst *MI, int OpNum, raw_ostream &OS); */
  /* void printZZOperand(const MCInst *MI, int OpNum, raw_ostream &OS); */
  /* void printMemOperandI(const MCInst *MI, int OpNum, raw_ostream &OS); */
  /* void printMemOperandRI(const MCInst *MI, int OpNum, raw_ostream &OS); */
  /* void printMemOperandRR(const MCInst *MI, int OpNum, raw_ostream &OS); */

  // Autogenerated by tblgen.
  void printInstruction(const MCInst *MI, raw_ostream &O);
  bool printAliasInstr(const MCInst *MI, raw_ostream &O);
  void printCustomAliasOperand(const MCInst *MI, unsigned OpIdx,
                               unsigned PrintMethodIdx, raw_ostream &O);
  static const char *getRegisterName(unsigned RegNo);

};
} // end namespace llvm

#endif
