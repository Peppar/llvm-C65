//===-- C65Subtarget.h - C65 subtarget information -------------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the C65 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_TARGET_C65SUBTARGET_H
#define LLVM_TARGET_C65SUBTARGET_H

#include "C65FrameLowering.h"
#include "C65InstrInfo.h"
#include "C65ISelLowering.h"
#include "C65Subtarget.h"
#include "C65SelectionDAGInfo.h"
#include "llvm/ADT/Triple.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "C65GenSubtargetInfo.inc"

namespace llvm {

class StringRef;

class C65Subtarget : public C65GenSubtargetInfo {
  virtual void anchor();
protected:
  bool Has65C02;
  bool Has65C816;
  C65Subtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);

private:
  Triple TargetTriple;
  const DataLayout DL;
  C65InstrInfo InstrInfo;
  C65TargetLowering TLInfo;
  C65SelectionDAGInfo TSInfo;
  C65FrameLowering FrameLowering;

public:
  C65Subtarget(const std::string &TT, const std::string &CPU,
               const std::string &FS, TargetMachine &TM);

  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const C65InstrInfo *getInstrInfo() const override {
    return &InstrInfo;
  }
  const C65RegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const C65TargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const DataLayout *getDataLayout() const override {
    return &DL;
  }
  const C65SelectionDAGInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }

  // Automatically generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  // Return true if the target has 65C02 capabilities
  bool has65C02() const { return Has65C02; }

  // Return true if the target has 65C816 capabilities
  bool has65C816() const { return Has65C816; }

  // Return true if the target has a 16-bit accumulator
  bool is16bit() const { return Has65C816; }
};
} // end namespace llvm

#endif
